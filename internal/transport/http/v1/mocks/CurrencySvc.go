// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "github.com/veleton777/test_work_blum/internal/dto"

	uuid "github.com/google/uuid"
)

// CurrencySvc is an autogenerated mock type for the CurrencySvc type
type CurrencySvc struct {
	mock.Mock
}

// Convert provides a mock function with given fields: ctx, course
func (_m *CurrencySvc) Convert(ctx context.Context, course dto.ConvertCurrencyReq) (float64, error) {
	ret := _m.Called(ctx, course)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ConvertCurrencyReq) (float64, error)); ok {
		return rf(ctx, course)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ConvertCurrencyReq) float64); ok {
		r0 = rf(ctx, course)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ConvertCurrencyReq) error); ok {
		r1 = rf(ctx, course)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCurrency provides a mock function with given fields: ctx, currency
func (_m *CurrencySvc) CreateCurrency(ctx context.Context, currency dto.Currency) error {
	ret := _m.Called(ctx, currency)

	if len(ret) == 0 {
		panic("no return value specified for CreateCurrency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Currency) error); ok {
		r0 = rf(ctx, currency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCurrency provides a mock function with given fields: ctx, id
func (_m *CurrencySvc) DeleteCurrency(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCurrency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCurrency provides a mock function with given fields: ctx, currency
func (_m *CurrencySvc) UpdateCurrency(ctx context.Context, currency dto.Currency) error {
	ret := _m.Called(ctx, currency)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCurrency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Currency) error); ok {
		r0 = rf(ctx, currency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCurrencySvc creates a new instance of CurrencySvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCurrencySvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *CurrencySvc {
	mock := &CurrencySvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
