// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"
	dto "github.com/veleton777/test_work_blum/internal/dto"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Get provides a mock function with given fields: codeFrom, codeTo
func (_m *Storage) Get(codeFrom string, codeTo string) (decimal.Decimal, bool) {
	ret := _m.Called(codeFrom, codeTo)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 decimal.Decimal
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, string) (decimal.Decimal, bool)); ok {
		return rf(codeFrom, codeTo)
	}
	if rf, ok := ret.Get(0).(func(string, string) decimal.Decimal); ok {
		r0 = rf(codeFrom, codeTo)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(codeFrom, codeTo)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: codeFrom, codeTo, data
func (_m *Storage) Set(codeFrom string, codeTo string, data dto.CurrencyStorageDTO) {
	_m.Called(codeFrom, codeTo, data)
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
