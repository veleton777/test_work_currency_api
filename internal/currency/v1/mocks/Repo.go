// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/veleton777/test_work_blum/internal/currency/v1/currency/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// CreateCurrency provides a mock function with given fields: ctx, _a1
func (_m *Repo) CreateCurrency(ctx context.Context, _a1 entity.Currency) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCurrency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Currency) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCurrency provides a mock function with given fields: ctx, id
func (_m *Repo) DeleteCurrency(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCurrency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrencies provides a mock function with given fields: ctx
func (_m *Repo) GetCurrencies(ctx context.Context) (entity.Currencies, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencies")
	}

	var r0 entity.Currencies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.Currencies, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.Currencies); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Currencies)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCurrency provides a mock function with given fields: ctx, _a1
func (_m *Repo) UpdateCurrency(ctx context.Context, _a1 entity.Currency) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCurrency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Currency) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
